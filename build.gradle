import java.text.SimpleDateFormat

buildscript {
    dependencies {
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.26.1"
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
}

// Access Git info from build script
plugins {
    id "org.ajoberstar.grgit" version "4.0.1"
    id 'nebula.lint' version '16.0.2'
    id "com.github.ben-manes.versions" version '0.27.0'
}

apply plugin: 'java'
apply plugin: 'pmd'
apply plugin: 'maven'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'nebula.lint'
gradleLint.rules = ['all-dependency','all-nebula-renames','archaic-wrapper','duplicate-dependency-class']

sourceCompatibility = 10
targetCompatibility = 10

if (version == 'unspecified') {
    version = getVersionName()
}

// Custom properties
//TODO Do some other way
//    ext.repo = org.ajoberstar.grgit.Grgit.open(project.file('.'))

spotless {
    java {
        eclipseFormatFile 'build-resources/eclipse.prefs.formatter.xml'
    }
}


configurations {
    deployerJars
}


install {
    repositories.mavenInstaller {
        pom.version = project.version;
        pom.artifactId = 'clientserver';
        pom.groupId = 'net.rptools.clientserver';
    }
}


uploadArchives {
    repositories.mavenDeployer {
        pom.version = project.version;
        pom.artifactId = 'clientserver';
        pom.groupId = 'net.rptools.clientserver';
        configuration = configurations.deployerJars;
        repository url: 'file://' + projectDir + '/../maven-repo'
    }
}



dependencies {
    compile 'log4j:log4j:1.2.17'
    compile 'com.caucho.hessian:hessian:3.1.6'
    deployerJars 'org.apache.maven.wagon:wagon-ssh:3.3.4'
}

ext.compileDate = new Date();
ext.yyyymmdd = (new SimpleDateFormat('yyyyMMDD')).format(ext.compileDate);


repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = 'http://maptool.craigs-stuff.net/repo/'
    }
}


/*
 * Gets the version name from the latest Git tag
 */

def getVersionName() {

    if (project.hasProperty('buildVersion')) {
        return buildVersion
    } else {
        String vtxtVersionNo = new File('./build-resources/version.txt').text.trim()

        return vtxtVersionNo
    }
}

//TODO Replace with spotbugs
//findbugs {
//    ignoreFailures = true
//    toolVersion = '3.0.0'
//    effort = 'max'
//    sourceSets = []  // Empty source set so it wont run during build/check
//}

pmd {
    ignoreFailures = true
    sourceSets = []  // Empty source set so it wont run during tebuild/check
}

task showBuildVersion() {
    doLast {
        println 'Build Version Number = ' + project.version
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'clientserver',
                   'Implementation-Version': project.version
    }
}

